/*
 * Copyright 2018 Raymond Dodge
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *  *  http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package name.rayrobdod.fightStage.unitAnimationGroup.infantryLancer;

import static name.rayrobdod.fightStage.unitAnimationGroup.util.Point2dBinding.createPoint2dBinding;
import static name.rayrobdod.fightStage.unitAnimationGroup.util.Point2dPathElements.newBoundCubicCurveTo;
import static name.rayrobdod.fightStage.unitAnimationGroup.util.Point2dPathElements.newBoundLineTo;
import static name.rayrobdod.fightStage.unitAnimationGroup.util.Point2dPathElements.newBoundMoveTo;

import javafx.geometry.Point2D;
import javafx.scene.Group;
import javafx.scene.Node;
import javafx.scene.paint.Color;
import javafx.scene.shape.ClosePath;
import javafx.beans.value.ObservableValue;
import javafx.beans.value.WritableDoubleValue;
import javafx.scene.shape.Path;

import name.rayrobdod.fightStage.unitAnimationGroup.util.*;

<%
	List<String> pointFields = [
		"leftFoot", "rightFoot", "leftKnee", "rightKnee", "leftPelvic", "rightPelvic",
		"leftHand", "rightHand", "leftElbow", "rightElbow", "leftShoulder", "rightShoulder",
		"head", "lanceCenter"
	]
	List<String> doubleFields = [
		"lanceAngle", "lanceTipDistance", "lanceButtDistance"
	]
%>

final class WritableLancerControlPoints {
	public final WritablePoint2dValue ${pointFields.join(";\n\tpublic final WritablePoint2dValue ")};
	public final ObservableWritableDoubleValue ${doubleFields.join(";\n\tpublic final ObservableWritableDoubleValue ")};
	
	public WritableLancerControlPoints() {
		<%
			for (String field : pointFields) {
				print "this.${field} = new WritablePoint2dValue();\n\t\t"
			}
			for (String field : doubleFields) {
				print "this.${field} = new ObservableWritableDoubleValue();\n\t\t"
			}
		%>
	}
	
	
	
	
	<% String[] sides = ["left", "right"] %>
	
	private static final double STROKE_HALFWIDTH = 0.5;
	private static final double LANCE_HALFWIDTH = 3;
	private static final double LEG_HALFWIDTH = 7;
	private static final double ARM_HALFWIDTH = 5;
	private static final double HEAD_HALFWIDTH = 15;
	
	private Node createStickFigure() {
		final Path retval = new Path(
			  newBoundMoveTo(this.leftFoot)
			, newBoundLineTo(this.leftKnee)
			, newBoundLineTo(this.leftPelvic)
			, newBoundLineTo(this.rightPelvic)
			, newBoundLineTo(this.rightKnee)
			, newBoundLineTo(this.rightFoot)
			, newBoundMoveTo(this.leftHand)
			, newBoundLineTo(this.leftElbow)
			, newBoundLineTo(this.leftShoulder)
			, newBoundLineTo(this.rightShoulder)
			, newBoundLineTo(this.rightElbow)
			, newBoundLineTo(this.rightHand)
			, newBoundMoveTo(this.rightPelvic)
			, newBoundLineTo(this.rightShoulder)
			, newBoundLineTo(this.head)
			, newBoundLineTo(this.leftShoulder)
			, newBoundLineTo(this.leftPelvic)
		);
		retval.setStroke(Color.BLACK);
		retval.setFill(Color.TRANSPARENT);
		retval.setStrokeWidth(2);
		return retval;
	}
	
	private Node createLance() {
		final Point2dExpression tip = this.lanceTip();
		final Point2dExpression butt = this.lanceButt();
		final Point2dExpression direction = this.lanceDirection();
		final Point2dExpression perp = direction.perpendicular();
		
		
		final Path shaft = new Path(
			  newBoundMoveTo(tip.add(perp.multiply(LANCE_HALFWIDTH)))
			, newBoundLineTo(tip.add(perp.multiply(-LANCE_HALFWIDTH)))
			, newBoundLineTo(butt.add(perp.multiply(-LANCE_HALFWIDTH)))
			, newBoundCubicCurveTo(
				  butt.add(direction.multiply(-5)).add(perp.multiply(-LANCE_HALFWIDTH))
				, butt.add(direction.multiply(-5)).add(perp.multiply(LANCE_HALFWIDTH))
				, butt.add(perp.multiply(LANCE_HALFWIDTH))
			  )
			, newBoundLineTo(tip.add(perp.multiply(LANCE_HALFWIDTH)))
		);
		shaft.setStroke(Color.BLACK);
		shaft.setFill(Color.BROWN);
		shaft.setStrokeWidth(1);
		
		final Path head = new Path(
			  newBoundMoveTo(tip.add(direction.multiply(-5)).add(perp.multiply(7.5)))
			, newBoundLineTo(tip.add(direction.multiply(-5)).add(perp.multiply(-7.5)))
			, newBoundLineTo(tip.add(direction.multiply(10)).add(perp.multiply(0)))
			, newBoundLineTo(tip.add(direction.multiply(-5)).add(perp.multiply(7.5)))
		);
		head.setStroke(Color.BLACK);
		head.setFill(Color.SILVER);
		head.setStrokeWidth(1);
		
		return new Group(shaft, head);
	}
	
	
	private Node createPantSeat() {return this.createPantSeatTemplate(Color.BLUE, -STROKE_HALFWIDTH);}
	private Node createPantSeatBorder() {return this.createPantSeatTemplate(Color.BLACK, STROKE_HALFWIDTH);}
	
	private Node createPantSeatTemplate(final Color fill, final double outset) {
		final Point2dExpression left = this.leftPelvic;
		final Point2dExpression right = this.rightPelvic;
		
		final Path leg = new Path(
			newBoundMoveTo(left.add(new Point2D(LEG_HALFWIDTH + outset, 2 + outset))),
			newBoundLineTo(left.add(new Point2D(LEG_HALFWIDTH + outset, -10 - outset))),
			newBoundLineTo(right.add(new Point2D(-LEG_HALFWIDTH - outset, -10 - outset))),
			newBoundLineTo(right.add(new Point2D(-LEG_HALFWIDTH - outset, 2 + outset))),
			new ClosePath()
		);
		leg.setFill(fill);
		leg.setStrokeWidth(0);
		return leg;
	}
	
	<% for (String side : sides) { %>
	private Node create${side.substring(0, 1).toUpperCase() + side.substring(1)}Leg() {
		return createLegTemplate(this.${side}Knee, this.${side}Foot, this.${side}Pelvic, Color.BLUE, -STROKE_HALFWIDTH);
	}
	private Node create${side.substring(0, 1).toUpperCase() + side.substring(1)}LegBorder() {
		return createLegTemplate(this.${side}Knee, this.${side}Foot, this.${side}Pelvic, Color.BLACK, STROKE_HALFWIDTH);
	}
	<% } %>
	
	private static Node createLegTemplate(final Point2dExpression pivot, final Point2dExpression edge1, final Point2dExpression edge2, final Color fill, final double outset) {
		final Point2dExpression dir1 = edge1.subtract(pivot).normalize();
		final Point2dExpression perp1 = dir1.perpendicular();
		final Point2dExpression dir2 = pivot.subtract(edge2).normalize();
		final Point2dExpression perp2 = dir2.perpendicular();
		
		final Point2dExpression backOfFoot = edge1.add(perp1.multiply(LEG_HALFWIDTH + outset));
		final Point2dExpression backOfPelvic = edge2.add(perp2.multiply(LEG_HALFWIDTH + outset));
		final Point2dExpression frontOfFoot = edge1.add(perp1.multiply(-LEG_HALFWIDTH - outset));
		final Point2dExpression frontOfPelvic = edge2.add(perp2.multiply(-LEG_HALFWIDTH - outset));
		final Point2dExpression frontOfKnee2 = pivot.add(perp2.multiply(-LEG_HALFWIDTH - outset));
		final Point2dExpression frontOfKnee1 = pivot.add(perp1.multiply(-LEG_HALFWIDTH - outset));
		
		final Path leg = new Path(
			// front
			newBoundMoveTo(frontOfPelvic),
			newBoundLineTo(frontOfKnee2),
			newBoundCubicCurveTo(
				frontOfKnee2.add(dir2.multiply(frontOfKnee2.subtract(frontOfKnee1).magnitude().multiply(0.75).add(outset))),
				frontOfKnee1.add(dir1.multiply(frontOfKnee1.subtract(frontOfKnee2).magnitude().multiply(-0.75).subtract(outset))),
				frontOfKnee1
			),
			newBoundLineTo(frontOfFoot),
			// back
			newBoundLineTo(backOfFoot),
			newBoundLineTo(backOfFoot.interception(dir1, backOfPelvic, dir2)),
			newBoundLineTo(backOfPelvic),
			new ClosePath()
		);
		leg.setFill(fill);
		leg.setStrokeWidth(0);
		return leg;
	}
	
	<% for (String side : sides) { %>
	private Node create${side.substring(0, 1).toUpperCase() + side.substring(1)}Forearm() {
		return createForearmTemplate(this.${side}Elbow, this.${side}Hand, Color.RED, -STROKE_HALFWIDTH);
	}
	private Node create${side.substring(0, 1).toUpperCase() + side.substring(1)}ForearmBorder() {
		return createForearmTemplate(this.${side}Elbow, this.${side}Hand, Color.BLACK, +STROKE_HALFWIDTH);
	}
	private Node create${side.substring(0, 1).toUpperCase() + side.substring(1)}Upperarm() {
		return createUpperarmTemplate(this.${side}Elbow, this.${side}Shoulder, Color.RED, -STROKE_HALFWIDTH);
	}
	private Node create${side.substring(0, 1).toUpperCase() + side.substring(1)}UpperarmBorder() {
		return createUpperarmTemplate(this.${side}Elbow, this.${side}Shoulder, Color.BLACK, +STROKE_HALFWIDTH);
	}
	private Node create${side.substring(0, 1).toUpperCase() + side.substring(1)}Elbow() {
		return createElbowTemplate(this.${side}Elbow, Color.RED, -STROKE_HALFWIDTH);
	}
	private Node create${side.substring(0, 1).toUpperCase() + side.substring(1)}ElbowBorder() {
		return createElbowTemplate(this.${side}Elbow, Color.BLACK, +STROKE_HALFWIDTH);
	}
	<% } %>
	
	private static Node createForearmTemplate(final Point2dExpression elbow, final Point2dExpression hand, final Color fill, final double outset) {
		final Point2dExpression dir = elbow.subtract(hand).normalize();
		final Point2dExpression perp = dir.perpendicular();
		
		final Point2dExpression topOfHand = hand.add(perp.multiply(ARM_HALFWIDTH + outset));
		final Point2dExpression botOfHand = hand.subtract(perp.multiply(ARM_HALFWIDTH + outset));
		final Point2dExpression topOfElbow = elbow.add(perp.multiply(ARM_HALFWIDTH + outset)).add(dir.multiply(-outset));
		final Point2dExpression botOfElbow = elbow.subtract(perp.multiply(ARM_HALFWIDTH + outset)).add(dir.multiply(-outset));
		
		final Path retval = new Path(
			newBoundMoveTo(topOfHand),
			newBoundLineTo(topOfElbow),
			newBoundLineTo(botOfElbow),
			newBoundLineTo(botOfHand),
			new ClosePath()
		);
		retval.setFill(fill);
		retval.setStrokeWidth(0);
		return retval;
	}
	
	private static Node createUpperarmTemplate(final Point2dExpression elbow, final Point2dExpression shoulder, final Color fill, final double outset) {
		final Point2dExpression dir = elbow.subtract(shoulder).normalize();
		final Point2dExpression perp = dir.perpendicular();
		
		final Point2dExpression topOfHand = shoulder.add(perp.multiply(ARM_HALFWIDTH + outset)).subtract(dir.multiply(-outset));
		final Point2dExpression botOfHand = shoulder.subtract(perp.multiply(ARM_HALFWIDTH + outset)).subtract(dir.multiply(-outset));
		final Point2dExpression topOfElbow = elbow.add(perp.multiply(ARM_HALFWIDTH + outset)).add(dir.multiply(-outset));
		final Point2dExpression botOfElbow = elbow.subtract(perp.multiply(ARM_HALFWIDTH + outset)).add(dir.multiply(-outset));
		
		final Path retval = new Path(
			newBoundMoveTo(topOfHand),
			newBoundLineTo(topOfElbow),
			newBoundLineTo(botOfElbow),
			newBoundLineTo(botOfHand),
			new ClosePath()
		);
		retval.setFill(fill);
		retval.setStrokeWidth(0);
		return retval;
	}
	
	private static Node createElbowTemplate(final WritablePoint2dValue center, final Color fill, final double outset) {
		javafx.scene.shape.Circle retval = new javafx.scene.shape.Circle();
		retval.centerXProperty().bind(center.x());
		retval.centerYProperty().bind(center.y());
		retval.radiusProperty().set(ARM_HALFWIDTH + outset);
		retval.setFill(fill);
		retval.setStrokeWidth(0);
		return retval;
	}
	
	
	private Node createLeftHand() {return this.createHandTemplate(this.leftHand, Color.PINK, -STROKE_HALFWIDTH);}
	private Node createLeftHandBorder() {return this.createHandTemplate(this.leftHand, Color.BLACK, STROKE_HALFWIDTH);}
	private Node createRightHand() {return this.createHandTemplate(this.rightHand, Color.PINK, -STROKE_HALFWIDTH);}
	private Node createRightHandBorder() {return this.createHandTemplate(this.rightHand, Color.BLACK, STROKE_HALFWIDTH);}
	
	private static Node createHandTemplate(final WritablePoint2dValue center, final Color fill, final double outset) {
		javafx.scene.shape.Circle retval = new javafx.scene.shape.Circle();
		retval.centerXProperty().bind(center.x());
		retval.centerYProperty().bind(center.y());
		retval.radiusProperty().set(ARM_HALFWIDTH + outset);
		retval.setFill(fill);
		retval.setStrokeWidth(0);
		return retval;
	}
	
	
	private Node createTorso() {return this.createTorsoTemplate(Color.RED, -STROKE_HALFWIDTH);}
	private Node createTorsoBorder() {return this.createTorsoTemplate(Color.BLACK, STROKE_HALFWIDTH);}
	
	private Node createTorsoTemplate(final Color fill, final double outset) {
		final Point2dExpression topDir = leftShoulder.subtract(rightShoulder).normalize();
		final Point2dExpression botDir = leftPelvic.subtract(rightPelvic).normalize();
		final Point2dExpression leftDir = leftShoulder.subtract(leftPelvic).normalize();
		final Point2dExpression rightDir = rightShoulder.subtract(rightPelvic).normalize();
		
		final Point2dExpression topLeftSide = this.leftShoulder.add(topDir.multiply(ARM_HALFWIDTH + outset));
		final Point2dExpression topRightSide = this.rightShoulder.add(topDir.multiply(-ARM_HALFWIDTH - outset));
		final Point2dExpression topLeftTop = this.leftShoulder.add(leftDir.multiply(ARM_HALFWIDTH + outset));
		final Point2dExpression topRightTop = this.rightShoulder.add(rightDir.multiply(ARM_HALFWIDTH + outset));
		final Point2dExpression botLeft = this.leftPelvic.add(botDir.multiply(LEG_HALFWIDTH + outset));
		final Point2dExpression botRight = this.rightPelvic.add(botDir.multiply(-LEG_HALFWIDTH - outset));
		
		final Path retval = new Path(
			newBoundMoveTo(botRight),
			newBoundLineTo(botLeft),
			newBoundLineTo(topLeftSide),
			newBoundLineTo(topLeftTop),
			newBoundLineTo(topRightTop),
			newBoundLineTo(topRightSide),
			new ClosePath()
		);
		retval.setFill(fill);
		retval.setStrokeWidth(0);
		return retval;
	}
	
	private Node createHead() {
		javafx.scene.shape.Circle retval = new javafx.scene.shape.Circle();
		retval.centerXProperty().bind(this.head.x());
		retval.centerYProperty().bind(this.head.y());
		retval.radiusProperty().set(HEAD_HALFWIDTH);
		retval.setStroke(Color.BLACK);
		retval.setFill(Color.PINK);
		retval.setStrokeWidth(1);
		return retval;
	}
	
	
	
	public Group createFigure() {
		return new Group(
			  this.createStickFigure()
			, this.createTorsoBorder()
			, this.createLeftElbowBorder()
			, this.createLeftUpperarmBorder()
			, this.createLeftElbow()
			, this.createLeftUpperarm()
			, this.createPantSeatBorder()
			, this.createLeftLegBorder()
			, this.createLeftLeg()
			, this.createTorso()
			, this.createHead()
			, this.createPantSeat()
			, this.createRightLegBorder()
			, this.createRightLeg()
			, this.createLeftForearmBorder()
			, this.createLeftForearm()
			, this.createRightUpperarmBorder()
			, this.createRightElbowBorder()
			, this.createRightForearmBorder()
			, this.createRightUpperarm()
			, this.createRightElbow()
			, this.createRightForearm()
			, this.createLance()
			, this.createLeftHandBorder()
			, this.createLeftHand()
			, this.createRightHandBorder()
			, this.createRightHand()
		);
	}
	
	
	
	
	
	
	private Point2dExpression lanceButt() {
		return createPoint2dBinding(() -> this.lanceCenter.get().add(Point2Ds.polar(-this.lanceButtDistance.get(), this.lanceAngle.get())),
				lanceCenter, lanceButtDistance, lanceAngle);
	}
	
	private Point2dExpression lanceTip() {
		return createPoint2dBinding(() -> this.lanceCenter.get().add(Point2Ds.polar(this.lanceTipDistance.get(), this.lanceAngle.get())),
				lanceCenter, lanceButtDistance, lanceAngle);
	}
	
	private Point2dExpression lanceDirection() {
		return createPoint2dBinding(() -> Point2Ds.polar(1, lanceAngle.get()), lanceAngle);
	}
}
