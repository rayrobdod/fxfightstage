/*
 * Copyright 2019 Raymond Dodge
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *  *  http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package name.rayrobdod.fightStage.unitAnimationGroup.infantryMage;

import static name.rayrobdod.fightStage.unitAnimationGroup.util.Point2dBinding.createPoint2dBinding;
import static name.rayrobdod.fightStage.unitAnimationGroup.util.Point2dPathElements.newBoundCubicCurveTo;
import static name.rayrobdod.fightStage.unitAnimationGroup.util.Point2dPathElements.newBoundLineTo;
import static name.rayrobdod.fightStage.unitAnimationGroup.util.Point2dPathElements.newBoundMoveTo;

import java.util.Optional;
import java.util.OptionalDouble;
import java.util.function.BinaryOperator;
import java.util.function.UnaryOperator;

import javafx.geometry.Point2D;
import javafx.scene.Group;
import javafx.scene.Node;
import javafx.scene.paint.Color;
import javafx.scene.shape.ClosePath;
import javafx.beans.value.ObservableValue;
import javafx.beans.value.WritableDoubleValue;
import javafx.scene.shape.Path;

import name.rayrobdod.fightStage.unitAnimationGroup.util.*;

<%
	boneNames = evaluate new File("samples/src/main/templates-java/name/rayrobdod/fightStage/unitAnimationGroup/infantryMage/data.groovy").readLines().join("\n")

	import java.util.stream.Stream
	import java.util.stream.Collectors
	static String toTitleCase(String value) { value.substring(0, 1).toUpperCase() + value.substring(1) }

	boneFieldNames = boneNames.stream().flatMap({x -> x.polarFields()}).collect(Collectors.toList())
%>

final class BoneControlsOptional {
	final Optional<Pivot> pivot;
	<%= boneFieldNames.stream().map({x -> "final OptionalDouble " + x}).collect(Collectors.joining(";\n\t")) %>;

	public static final BoneControlsOptional NIL = new BoneControlsOptional(
		Optional.empty(), <%= boneFieldNames.stream().map({x -> "OptionalDouble.empty()"}).collect(Collectors.joining(", ")) %>
	);

	public BoneControlsOptional(
		final Optional<Pivot> pivot,
		<%= boneFieldNames.stream().map({x -> "final OptionalDouble " + x}).collect(Collectors.joining(",\n\t\t")) %>
	) {
		this.pivot = pivot;
		<%= boneFieldNames.stream().map({x -> "this." + x + " = " + x}).collect(Collectors.joining(";\n\t\t")) %>;
	}

	public BoneControlsOptional copyWithPivot(Optional<Pivot> value) {return new BoneControlsOptional(value, <%= boneFieldNames.join(", ") %>);}
	<%=
		boneFieldNames.stream().map({outer ->
			boneFieldNames.stream().map({inner -> (inner == outer ? "value" : inner)}).collect(Collectors.joining(
				", ", "public BoneControlsOptional copyWith${toTitleCase(outer)}(OptionalDouble value) {return new BoneControlsOptional(this.pivot, ", ");}"
			))
		}).collect(Collectors.joining("\n\t"))
	%>
	<%=
		boneFieldNames.stream().map({outer ->
			boneFieldNames.stream().map({inner -> (inner == outer ? "OptionalDouble.of(value)" : inner)}).collect(Collectors.joining(
				", ", "public BoneControlsOptional copyWithSome${toTitleCase(outer)}(double value) {return new BoneControlsOptional(this.pivot, ", ");}"
			))
		}).collect(Collectors.joining("\n\t"))
	%>

}
