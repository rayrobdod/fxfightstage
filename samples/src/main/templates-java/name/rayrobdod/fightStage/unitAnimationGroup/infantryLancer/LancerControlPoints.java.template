/*
 * Copyright 2018 Raymond Dodge
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *  *  http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package name.rayrobdod.fightStage.unitAnimationGroup.infantryLancer;

import java.util.function.BinaryOperator;
import java.util.function.UnaryOperator;

import javafx.geometry.Point2D;

<%
	List<String> fields = java.util.stream.Stream.concat(pointFields.stream(), doubleFields.stream())
			.collect(java.util.stream.Collectors.toList());
%>

final class LancerControlPoints {
	public final Point2D ${pointFields.join(";\n\tpublic final Point2D ")};
	public final double ${doubleFields.join(";\n\tpublic final double ")};
	
	public static final LancerControlPoints ZERO = new LancerControlPoints(
		<%
			print java.util.stream.Stream.concat(
				pointFields.stream().map({x -> "Point2D.ZERO"}),
				doubleFields.stream().map({x -> "0.0"})
			).collect(java.util.stream.Collectors.joining(",\n\t\t"))
		%>
	);
	
	public LancerControlPoints(
		final Point2D ${pointFields.join(",\n\t\tfinal Point2D ")},
		final double ${doubleFields.join(",\n\t\tfinal double ")}
	){
		<%
			for (String field : fields) {
				print "this.${field} = ${field};\n\t\t"
			}
		%>
	}
	
	@Override public String toString() {
		return "LancerControlPoints [" +
			<%
				for (String field : fields) {
					print "\"${field} : \" + ${field} + \", \" +\n\t\t\t"
				}
			%>
		"]";
	}
	
	<%
		print pointFields.stream().map({outer ->
			String outerTitle = "${outer.charAt(0).toUpperCase()}${outer.substring(1)}"
			fields.stream().map({inner -> (inner == outer ? "value" : inner)}).collect(java.util.stream.Collectors.joining(
				", ", "public LancerControlPoints copyWith$outerTitle(Point2D value) {return new LancerControlPoints(", ");}"
			))
		}).collect(java.util.stream.Collectors.joining("\n\t"))
		print doubleFields.stream().map({outer ->
			String outerTitle = "${outer.charAt(0).toUpperCase()}${outer.substring(1)}"
			fields.stream().map({inner -> (inner == outer ? "value" : inner)}).collect(java.util.stream.Collectors.joining(
				", ", "public LancerControlPoints copyWith$outerTitle(double value) {return new LancerControlPoints(", ");}"
			))
		}).collect(java.util.stream.Collectors.joining("\n\t"))
	%>
	
	public final Point2D lanceTip() {
		return this.lanceCenter.add(Point2Ds.polar(this.lanceTipDistance, this.lanceAngle));
	}
}
